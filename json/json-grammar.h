//
// This C-language parser header was generated by APG Version 7.0.
// User modifications invalidate the license agreement and may cause unpredictable results.
//
/*  *************************************************************************************
    Copyright (c) 2021, Lowell D. Thomas
    All rights reserved.

    This file is part of APG Version 7.0.
    APG Version 7.0 may be used under the terms of the BSD 2-Clause License.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*   *************************************************************************************/

#ifndef _JSON_GRAMMAR_H_
#define _JSON_GRAMMAR_H_

// rule ids
#define JSON_GRAMMAR_ARRAY 18
#define JSON_GRAMMAR_ASCII 46
#define JSON_GRAMMAR_BACKSPACE 41
#define JSON_GRAMMAR_BEGIN_ARRAY 1
#define JSON_GRAMMAR_BEGIN_OBJECT 2
#define JSON_GRAMMAR_CHAR 37
#define JSON_GRAMMAR_CR 44
#define JSON_GRAMMAR_DECIMAL_POINT 21
#define JSON_GRAMMAR_DIGIT 56
#define JSON_GRAMMAR_DIGIT1_9 22
#define JSON_GRAMMAR_E 23
#define JSON_GRAMMAR_EMINUS 29
#define JSON_GRAMMAR_END_ARRAY 3
#define JSON_GRAMMAR_END_MEMBER_SEPARATOR 7
#define JSON_GRAMMAR_END_OBJECT 4
#define JSON_GRAMMAR_END_VALUE_SEPARATOR 8
#define JSON_GRAMMAR_EPLUS 31
#define JSON_GRAMMAR_EXP 24
#define JSON_GRAMMAR_FALSE 11
#define JSON_GRAMMAR_FORM_FEED 42
#define JSON_GRAMMAR_FRAC 25
#define JSON_GRAMMAR_FRAC_DIGITS 26
#define JSON_GRAMMAR_FRAC_ONLY 20
#define JSON_GRAMMAR_HEXDIG 57
#define JSON_GRAMMAR_INT 27
#define JSON_GRAMMAR_JSON_TEXT 0
#define JSON_GRAMMAR_KEY 16
#define JSON_GRAMMAR_KEY_BEGIN 17
#define JSON_GRAMMAR_LINE_FEED 43
#define JSON_GRAMMAR_MEMBER 15
#define JSON_GRAMMAR_MINUS 28
#define JSON_GRAMMAR_NAME_SEPARATOR 5
#define JSON_GRAMMAR_NULL 12
#define JSON_GRAMMAR_NUMBER 19
#define JSON_GRAMMAR_OBJECT 14
#define JSON_GRAMMAR_PLUS 30
#define JSON_GRAMMAR_QUOTE 38
#define JSON_GRAMMAR_R_SOLIDUS 39
#define JSON_GRAMMAR_SOLIDUS 40
#define JSON_GRAMMAR_STRING 33
#define JSON_GRAMMAR_STRING_BEGIN 34
#define JSON_GRAMMAR_STRING_CONTENT 35
#define JSON_GRAMMAR_STRING_END 36
#define JSON_GRAMMAR_TAB 45
#define JSON_GRAMMAR_TRUE 13
#define JSON_GRAMMAR_UTF16 47
#define JSON_GRAMMAR_UTF16_1 49
#define JSON_GRAMMAR_UTF16_2 48
#define JSON_GRAMMAR_UTF16_TAIL 50
#define JSON_GRAMMAR_UTF8 51
#define JSON_GRAMMAR_UTF8_2 52
#define JSON_GRAMMAR_UTF8_3 53
#define JSON_GRAMMAR_UTF8_4 54
#define JSON_GRAMMAR_UTF8_TAIL 55
#define JSON_GRAMMAR_VALUE 10
#define JSON_GRAMMAR_VALUE_SEPARATOR 6
#define JSON_GRAMMAR_WS 9
#define JSON_GRAMMAR_ZERO 32
#define RULE_COUNT_JSON_GRAMMAR 58

// pointer to parser initialization data
extern void* vpJsonGrammarInit;

// Helper function(s) for setting rule/UDT name callbacks.
// Un-comment and replace named NULL with pointer to the appropriate callback function.
//  NOTE: This can easily be modified for setting AST callback functions:
//        Replace parser_callback with ast_callback and
//        vParserSetRuleCallback(vpParserCtx) with vAstSetRuleCallback(vpAstCtx) and
//        vParserSetUdtCallback(vpParserCtx) with vAstSetUdtCallback(vpAstCtx).
/****************************************************************
void vJsonGrammarRuleCallbacks(void* vpParserCtx){
    aint ui;
    parser_callback cb[RULE_COUNT_JSON_GRAMMAR];
    cb[JSON_GRAMMAR_ARRAY] = NULL;
    cb[JSON_GRAMMAR_ASCII] = NULL;
    cb[JSON_GRAMMAR_BACKSPACE] = NULL;
    cb[JSON_GRAMMAR_BEGIN_ARRAY] = NULL;
    cb[JSON_GRAMMAR_BEGIN_OBJECT] = NULL;
    cb[JSON_GRAMMAR_CHAR] = NULL;
    cb[JSON_GRAMMAR_CR] = NULL;
    cb[JSON_GRAMMAR_DECIMAL_POINT] = NULL;
    cb[JSON_GRAMMAR_DIGIT] = NULL;
    cb[JSON_GRAMMAR_DIGIT1_9] = NULL;
    cb[JSON_GRAMMAR_E] = NULL;
    cb[JSON_GRAMMAR_EMINUS] = NULL;
    cb[JSON_GRAMMAR_END_ARRAY] = NULL;
    cb[JSON_GRAMMAR_END_MEMBER_SEPARATOR] = NULL;
    cb[JSON_GRAMMAR_END_OBJECT] = NULL;
    cb[JSON_GRAMMAR_END_VALUE_SEPARATOR] = NULL;
    cb[JSON_GRAMMAR_EPLUS] = NULL;
    cb[JSON_GRAMMAR_EXP] = NULL;
    cb[JSON_GRAMMAR_FALSE] = NULL;
    cb[JSON_GRAMMAR_FORM_FEED] = NULL;
    cb[JSON_GRAMMAR_FRAC] = NULL;
    cb[JSON_GRAMMAR_FRAC_DIGITS] = NULL;
    cb[JSON_GRAMMAR_FRAC_ONLY] = NULL;
    cb[JSON_GRAMMAR_HEXDIG] = NULL;
    cb[JSON_GRAMMAR_INT] = NULL;
    cb[JSON_GRAMMAR_JSON_TEXT] = NULL;
    cb[JSON_GRAMMAR_KEY] = NULL;
    cb[JSON_GRAMMAR_KEY_BEGIN] = NULL;
    cb[JSON_GRAMMAR_LINE_FEED] = NULL;
    cb[JSON_GRAMMAR_MEMBER] = NULL;
    cb[JSON_GRAMMAR_MINUS] = NULL;
    cb[JSON_GRAMMAR_NAME_SEPARATOR] = NULL;
    cb[JSON_GRAMMAR_NULL] = NULL;
    cb[JSON_GRAMMAR_NUMBER] = NULL;
    cb[JSON_GRAMMAR_OBJECT] = NULL;
    cb[JSON_GRAMMAR_PLUS] = NULL;
    cb[JSON_GRAMMAR_QUOTE] = NULL;
    cb[JSON_GRAMMAR_R_SOLIDUS] = NULL;
    cb[JSON_GRAMMAR_SOLIDUS] = NULL;
    cb[JSON_GRAMMAR_STRING] = NULL;
    cb[JSON_GRAMMAR_STRING_BEGIN] = NULL;
    cb[JSON_GRAMMAR_STRING_CONTENT] = NULL;
    cb[JSON_GRAMMAR_STRING_END] = NULL;
    cb[JSON_GRAMMAR_TAB] = NULL;
    cb[JSON_GRAMMAR_TRUE] = NULL;
    cb[JSON_GRAMMAR_UTF16] = NULL;
    cb[JSON_GRAMMAR_UTF16_1] = NULL;
    cb[JSON_GRAMMAR_UTF16_2] = NULL;
    cb[JSON_GRAMMAR_UTF16_TAIL] = NULL;
    cb[JSON_GRAMMAR_UTF8] = NULL;
    cb[JSON_GRAMMAR_UTF8_2] = NULL;
    cb[JSON_GRAMMAR_UTF8_3] = NULL;
    cb[JSON_GRAMMAR_UTF8_4] = NULL;
    cb[JSON_GRAMMAR_UTF8_TAIL] = NULL;
    cb[JSON_GRAMMAR_VALUE] = NULL;
    cb[JSON_GRAMMAR_VALUE_SEPARATOR] = NULL;
    cb[JSON_GRAMMAR_WS] = NULL;
    cb[JSON_GRAMMAR_ZERO] = NULL;
    for(ui = 0; ui < (aint)RULE_COUNT_JSON_GRAMMAR; ui++){
        vParserSetRuleCallback(vpParserCtx, ui, cb[ui]);
    }
}
****************************************************************/

#endif /* _JSON_GRAMMAR_H_ */
