{
  "valid": {
    "lwsdisp": {
      "description": "3.1.1.6.  Message with No LWS between Display Name and <\u000A\u000A   This OPTIONS request is not valid per the grammar in RFC 3261 since\u000A   there is no LWS between the token in the display name and < in the\u000A   From header field value.  This has been identified as a specification\u000A   bug that will be removed when RFC 3261 is revised.  Elements should\u000A   accept this request as well formed.\u000A\u000A      Message Details : lwsdisp\u000A      \u000A      LDT: 01/04/2021\u000A      Accepts display name \"caller\" as d-name and the following LAQUOT\u000A      as expected.\u000A\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: caller<sip:caller@example.com>;tag=323\u000AMax-Forwards: 70\u000ACall-ID: lwsdisp.1234abcd@funky.example.com\u000ACSeq: 60 OPTIONS\u000AVia: SIP/2.0/UDP funky.example.com;branch=z9hG4bKkdjuw\u000Al: 0\u000A\u000A"
    },
    "esc02": {
      "description": "3.1.1.5.  Use of % When It Is Not an Escape\u000A\u000A   In most of the places % can appear in a SIP message, it is not an\u000A   escape character.  This can surprise the unwary implementor.  The\u000A   following well-formed request has these properties:\u000A\u000A   o  The request method is unknown.  It is NOT equivalent to REGISTER.\u000A\u000A   o  The display name portion of the To and From header fields is\u000A      \"%Z%45\".  Note that this is not the same as %ZE.\u000A\u000A   o  This message has two Contact header field values, not three.\u000A      <sip:alias2@host2.example.com> is a C%6Fntact header field value.\u000A\u000A   A parser should accept this message as well formed.  A proxy would\u000A   forward or reject the message depending on what the Request-URI meant\u000A   to it.  An endpoint would reject this message with a 501.\u000A\u000A      Message Details : esc02\u000A      \u000A      LDT: 01/04/2021\u000A      The request method is accepted.\u000A      \"%Z%45\" is accepted as a quoted-string, display name in both the\u000A      To: and From: fields.\u000A      The two Contact headers are accepted as expected.\u000A      The C%6Fntact field is accepted as the nearly all-inclusive\u000A      extension-header.\u000A\u000A",
      "data": "RE%47IST%45R sip:registrar.example.com SIP/2.0\u000ATo: \"%Z%45\" <sip:resource@example.com>\u000AFrom: \"%Z%45\" <sip:resource@example.com>;tag=f232jadfj23\u000ACall-ID: esc02.asdfnqwo34rq23i34jrjasdcnl23nrlknsdf\u000AVia: SIP/2.0/TCP host.example.com;branch=z9hG4bK209%fzsnel234\u000ACSeq: 29344 RE%47IST%45R\u000AMax-Forwards: 70\u000AContact: <sip:alias1@host1.example.com>\u000AC%6Fntact: <sip:alias2@host2.example.com>\u000AContact: <sip:alias3@host3.example.com>\u000Al: 0\u000A\u000A"
    },
    "noreason": {
      "description": "\u000A3.1.1.13.  Empty Reason Phrase\u000A\u000A   This well-formed response contains no reason phrase.  A parser must\u000A   accept this message.  The space character after the reason code is\u000A   required.  If it were not present, this message could be rejected as\u000A   invalid (a liberal receiver would accept it anyway).\u000A\u000A      Message Details : noreason\u000A      \u000A      LDT: 01/04/2021\u000A      The Reason-Phrase parses as empty as allowed and expected.\u000A",
      "data": "SIP/2.0 100 \u000AVia: SIP/2.0/UDP 192.0.2.105;branch=z9hG4bK2398ndaoe\u000ACall-ID: noreason.asndj203insdf99223ndf\u000ACSeq: 35 INVITE\u000AFrom: <sip:user@example.com>;tag=39ansfi3\u000ATo: <sip:user@example.edu>;tag=902jndnke3\u000AContent-Length: 0\u000AContact: <sip:user@host105.example.com>\u000A\u000A"
    },
    "esc01": {
      "description": "3.1.1.3.  Valid Use of the % Escaping Mechanism\u000A\u000A   This INVITE exercises the % HEX HEX escaping mechanism in several\u000A   places.  The request is syntactically valid.  Interesting features\u000A   include the following:\u000A\u000A   o  The request-URI has sips:user@example.com embedded in its\u000A      userpart.  What that might mean to example.net is beyond the scope\u000A      of this document.\u000A\u000A   o  The From and To URIs have escaped characters in their userparts.\u000A\u000A   o  The Contact URI has escaped characters in the URI parameters.\u000A      Note that the \"name\" uri-parameter has a value of \"value%41\",\u000A      which is NOT equivalent to \"valueA\".  Per [RFC3986], unescaping\u000A      URI components is never performed recursively.\u000A\u000A   A parser must accept this as a well-formed message.  The application\u000A   using the message must treat the % HEX HEX expansions as equivalent\u000A   to the character being encoded.  The application must not try to\u000A   interpret % as an escape character in those places where % HEX HEX\u000A   (\"escaped\" in the grammar) is not a valid part of the construction.\u000A   In [RFC3261], \"escaped\" only occurs in the expansions of SIP-URI,\u000A   SIPS-URI, and Reason-Phrase.\u000A\u000A      Message Details : esc01\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected.\u000A\u000A",
      "data": "INVITE sip:sips%3Auser%40example.com@example.net SIP/2.0\u000ATo: sip:%75se%72@example.com\u000AFrom: <sip:I%20have%20spaces@example.net>;tag=938\u000AMax-Forwards: 87\u000Ai: esc01.239409asdfakjkn23onasd0-3234\u000ACSeq: 234234 INVITE\u000AVia: SIP/2.0/UDP host5.example.net;branch=z9hG4bKkdjuw\u000AC: application/sdp\u000AContact:\u000A  <sip:cal%6Cer@host5.example.net;%6C%72;n%61me=v%61lue%25%34%31>\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000As=-\u000Ac=IN IP4 192.0.2.1\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "semiuri": {
      "description": "3.1.1.9.  Semicolon-Separated Parameters in URI User Part\u000A\u000A   This request has a semicolon-separated parameter contained in the\u000A   \"user\" part of the Request-URI (whose value contains an escaped @\u000A   symbol).  Receiving elements will accept this as a well-formed\u000A   message.  The Request-URI will parse so that the user part is\u000A   \"user;par=u@example.net\".\u000A\u000A      Message Details : semiuri\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected.\u000A\u000A",
      "data": "OPTIONS sip:user;par=u%40example.net@example.com SIP/2.0\u000ATo: sip:j_user@example.com\u000AFrom: sip:caller@example.org;tag=33242\u000AMax-Forwards: 3\u000ACall-ID: semiuri.0ha0isndaksdj\u000ACSeq: 8 OPTIONS\u000AAccept: application/sdp, application/pkcs7-mime,\u000A        multipart/mixed, multipart/signed,\u000A        message/sip, message/sipfrag\u000AVia: SIP/2.0/UDP 192.0.2.1;branch=z9hG4bKkdjuw\u000Al: 0\u000A\u000A"
    },
    "wsinv": {
      "description": "3.1.1.1.  A Short Tortuous INVITE\u000A\u000A   This short, relatively human-readable message contains:\u000A\u000A   o  line folding all over.\u000A\u000A   o  escaped characters within quotes.\u000A\u000A   o  an empty subject.\u000A\u000A   o  LWS between colons, semicolons, header field values, and other\u000A      fields.\u000A\u000A   o  both comma separated and separately listed header field values.\u000A\u000A   o  a mix of short and long form for the same header field name.\u000A\u000A   o  unknown Request-URI parameter.\u000A\u000A   o  unknown header fields.\u000A\u000A   o  an unknown header field with a value that would be syntactically\u000A      invalid if it were defined in terms of generic-param.\u000A\u000A   o  unusual header field ordering.\u000A\u000A   o  unusual header field name character case.\u000A\u000A   o  unknown parameters of a known header field.\u000A\u000A   o  a uri parameter with no value.\u000A\u000A   o  a header parameter with no value.\u000A\u000A   o  integer fields (Max-Forwards and CSeq) with leading zeros.\u000A\u000A   All elements should treat this as a well-formed request.\u000A\u000A   The UnknownHeaderWithUnusualValue header field deserves special\u000A   attention.  If this header field were defined in terms of comma-\u000A   separated values with semicolon-separated parameters (as would many\u000A   of the existing defined header fields), this would be invalid.\u000A   However, since the receiving element does not know the definition of\u000A   the syntax for this field, it must parse it as a header value.\u000A   Proxies would forward this header field unchanged.  Endpoints would\u000A   ignore the header field.\u000A\u000A      Message Details : wsinv\u000A      \u000A      LDT: 01/04/2021\u000A      Both the NewFangledHeader and the UnknownHeaderWithUnusualValue\u000A      parse as extension-header.\u000A      Parses as expected.\u000A\u000A",
      "data": "INVITE sip:vivekg@chair-dnrc.example.com;unknownparam SIP/2.0\u000ATO :\u000A sip:vivekg@chair-dnrc.example.com ;   tag    = 1918181833n\u000Afrom   : \"J Rosenberg \\\\\\\"\"       <sip:jdrosen@example.com>\u000A  ;\u000A  tag = 98asjd8\u000AMaX-fOrWaRdS: 0068\u000ACall-ID: wsinv.ndaksdj@192.0.2.1\u000AContent-Length   : 150\u000Acseq: 0009\u000A  INVITE\u000AVia  : SIP  /   2.0\u000A /UDP\u000A    192.0.2.2;branch=390skdjuw\u000As :\u000ANewFangledHeader:   newfangled value\u000A continued newfangled value\u000AUnknownHeaderWithUnusualValue: ;;,,;;,;\u000AContent-Type: application/sdp\u000ARoute:\u000A <sip:services.example.com;lr;unknownwith=value;unknown-no-value>\u000Av:  SIP  / 2.0  / TCP     spindle.example.com   ;\u000A  branch  =   z9hG4bK9ikj8  ,\u000A SIP  /    2.0   / UDP  192.168.255.111   ; branch=\u000A z9hG4bK30239\u000Am:\"Quoted string \\\"\\\"\" <sip:jdrosen@example.com> ; newparam =\u000A      newvalue ;\u000A  secondparam ; q = 0.33\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.3\u000As=-\u000Ac=IN IP4 192.0.2.4\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "longreq": {
      "description": "3.1.1.7.  Long Values in Header Fields\u000A\u000A   This well-formed request contains header fields with many values and\u000A   values that are very long.  Features include the following:\u000A\u000A   o  The To header field has a long display name, and long uri\u000A      parameter names and values.\u000A\u000A   o  The From header field has long header parameter names and values,\u000A      in particular, a very long tag.\u000A\u000A   o  The Call-ID is one long token.\u000A\u000A      Message Details : longreq\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected.\u000A\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ATo: \"I have a user name of extremeextremeextremeextremeextremeextremeextremeextremeextremeextreme proportion\"<sip:user@example.com:6000;unknownparam1=verylonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongvalue;longparamnamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename=shortvalue;verylonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongParameterNameWithNoValue>\u000AF: sip:amazinglylongcallernameamazinglylongcallernameamazinglylongcallernameamazinglylongcallernameamazinglylongcallername@example.net;tag=12982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982982424;unknownheaderparamnamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamenamename=unknowheaderparamvaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevaluevalue;unknownValuelessparamnameparamnameparamnameparamnameparamnameparamnameparamnameparamnameparamnameparamname\u000ACall-ID: longreq.onereallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallyreallylongcallid\u000ACSeq: 3882340 INVITE\u000AUnknown-LongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLongLong-Name: unknown-longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong-value; unknown-longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong-parameter-name = unknown-longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglong-parameter-value\u000AVia: SIP/2.0/TCP sip33.example.com\u000Av: SIP/2.0/TCP sip32.example.com\u000AV: SIP/2.0/TCP sip31.example.com\u000AVia: SIP/2.0/TCP sip30.example.com\u000AViA: SIP/2.0/TCP sip29.example.com\u000AVIa: SIP/2.0/TCP sip28.example.com\u000AVIA: SIP/2.0/TCP sip27.example.com\u000Avia: SIP/2.0/TCP sip26.example.com\u000AviA: SIP/2.0/TCP sip25.example.com\u000AvIa: SIP/2.0/TCP sip24.example.com\u000AvIA: SIP/2.0/TCP sip23.example.com\u000AV :  SIP/2.0/TCP sip22.example.com\u000Av :  SIP/2.0/TCP sip21.example.com\u000AV  : SIP/2.0/TCP sip20.example.com\u000Av  : SIP/2.0/TCP sip19.example.com\u000AVia : SIP/2.0/TCP sip18.example.com\u000AVia  : SIP/2.0/TCP sip17.example.com\u000AVia: SIP/2.0/TCP sip16.example.com\u000AVia: SIP/2.0/TCP sip15.example.com\u000AVia: SIP/2.0/TCP sip14.example.com\u000AVia: SIP/2.0/TCP sip13.example.com\u000AVia: SIP/2.0/TCP sip12.example.com\u000AVia: SIP/2.0/TCP sip11.example.com\u000AVia: SIP/2.0/TCP sip10.example.com\u000AVia: SIP/2.0/TCP sip9.example.com\u000AVia: SIP/2.0/TCP sip8.example.com\u000AVia: SIP/2.0/TCP sip7.example.com\u000AVia: SIP/2.0/TCP sip6.example.com\u000AVia: SIP/2.0/TCP sip5.example.com\u000AVia: SIP/2.0/TCP sip4.example.com\u000AVia: SIP/2.0/TCP sip3.example.com\u000AVia: SIP/2.0/TCP sip2.example.com\u000AVia: SIP/2.0/TCP sip1.example.com\u000AVia: SIP/2.0/TCP host.example.com;received=192.0.2.5;branch=verylonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongbranchvalue\u000AMax-Forwards: 70\u000AContact: <sip:amazinglylongcallernameamazinglylongcallernameamazinglylongcallernameamazinglylongcallernameamazinglylongcallername@host5.example.net>\u000AContent-Type: application/sdp\u000Al: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000As=-\u000Ac=IN IP4 192.0.2.1\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "transports": {
      "description": "3.1.1.10.  Varied and Unknown Transport Types\u000A\u000A   This request contains Via header field values with all known\u000A   transport types and exercises the transport extension mechanism.\u000A   Parsers must accept this message as well formed.  Elements receiving\u000A   this message would process it exactly as if the 2nd and subsequent\u000A   header field values specified UDP (or other transport).\u000A\u000A      Message Details : transports\u000A      \u000A      LDT: 01/04/2021\u000A      The UNKNOWN transport type parses correctly as other-transport = token.\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: <sip:caller@example.com>;tag=323\u000AMax-Forwards: 70\u000ACall-ID:  transports.kijh4akdnaqjkwendsasfdj\u000AAccept: application/sdp\u000ACSeq: 60 OPTIONS\u000AVia: SIP/2.0/UDP t1.example.com;branch=z9hG4bKkdjuw\u000AVia: SIP/2.0/SCTP t2.example.com;branch=z9hG4bKklasjdhf\u000AVia: SIP/2.0/TLS t3.example.com;branch=z9hG4bK2980unddj\u000AVia: SIP/2.0/UNKNOWN t4.example.com;branch=z9hG4bKasd0f3en\u000AVia: SIP/2.0/TCP t5.example.com;branch=z9hG4bK0a9idfnee\u000Al: 0\u000A\u000A"
    },
    "escnull": {
      "description": "3.1.1.4.  Escaped Nulls in URIs\u000A\u000A   This register request contains several URIs with nulls in the\u000A   userpart.  The message is well formed - parsers must accept this\u000A   message.  Implementations must take special care when unescaping the\u000A   Address-of-Record (AOR) in this request so as to not prematurely\u000A   shorten the username.  This request registers two distinct contact\u000A   URIs.\u000A\u000A      Message Details : escnull\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected. All nulls parsed as escaped.\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: sip:null-%00-null@example.com\u000AFrom: sip:null-%00-null@example.com;tag=839923423\u000AMax-Forwards: 70\u000ACall-ID: escnull.39203ndfvkjdasfkq3w4otrq0adsfdfnavd\u000ACSeq: 14398234 REGISTER\u000AVia: SIP/2.0/UDP host5.example.com;branch=z9hG4bKkdjuw\u000AContact: <sip:%00@host5.example.com>\u000AContact: <sip:%00%00@host5.example.com>\u000AL:0\u000A\u000A"
    },
    "unreason": {
      "description": "3.1.1.12.  Unusual Reason Phrase\u000A\u000A   This 200 response contains a reason phrase other than \"OK\".  The\u000A   reason phrase is intended for human consumption and may contain any\u000A   string produced by\u000A\u000A       Reason-Phrase   =  *(reserved / unreserved / escaped\u000A                          / UTF8-NONASCII / UTF8-CONT / SP / HTAB)\u000A\u000A   This particular response contains unreserved and non-ascii UTF-8\u000A   characters.  This response is well formed.  A parser must accept this\u000A   message.\u000A\u000A      Message Details : unreason\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected with UTF8-NONASCII accepting many characters.\u000A\u000A",
      "data": "SIP/2.0 200 = 2**3 * 5**2 Ð½Ð¾ ÑÑÐ¾ Ð´ÐµÐ²ÑÐ½Ð¾ÑÑÐ¾ Ð´ÐµÐ²ÑÑÑ - Ð¿ÑÐ¾ÑÑÐ¾Ðµ\u000AVia: SIP/2.0/UDP 192.0.2.198;branch=z9hG4bK1324923\u000ACall-ID: unreason.1234ksdfak3j2erwedfsASdf\u000ACSeq: 35 INVITE\u000AFrom: sip:user@example.com;tag=11141343\u000ATo: sip:user@example.edu;tag=2229\u000AContent-Length: 154\u000AContent-Type: application/sdp\u000AContact: <sip:user@host198.example.com>\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.198\u000As=-\u000Ac=IN IP4 192.0.2.198\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "intmeth": {
      "description": "3.1.1.2.  Wide Range of Valid Characters\u000A\u000A   This message exercises a wider range of characters in several key\u000A   syntactic elements than implementations usually see.  In particular,\u000A   note the following:\u000A\u000A   o  The Method contains non-alpha characters from token.  Note that %\u000A      is not an escape character for this field.  A method of IN%56ITE\u000A      is an unknown method.  It is not the same as a method of INVITE.\u000A\u000A   o  The Request-URI contains unusual, but legal, characters.\u000A\u000A   o  A branch parameter contains all non-alphanum characters from\u000A      token.\u000A\u000A   o  The To header field value's quoted string contains quoted-pair\u000A      expansions, including a quoted NULL character.\u000A\u000A   o  The name part of name-addr in the From header field value contains\u000A      multiple tokens (instead of a quoted string) with all non-alphanum\u000A      characters from the token production rule.  That value also has an\u000A      unknown header parameter whose name contains the non-alphanum\u000A      token characters and whose value is a non-ascii range UTF-8\u000A      encoded string.  The tag parameter on this value contains the\u000A      non-alphanum token characters.\u000A\u000A   o  The Call-ID header field value contains the non-alphanum\u000A      characters from word.  Notice that in this production:\u000A\u000A      *  % is not an escape character.  It is only an escape character\u000A         in productions matching the rule \"escaped\".\u000A\u000A      *  \" does not start a quoted string.  None of ',` or \" imply that\u000A         there will be a matching symbol later in the string.\u000A\u000A      *  The characters []{}()<> do not have any grouping semantics.\u000A         They are not required to appear in balanced pairs.\u000A\u000A   o  There is an unknown header field (matching extension-header) with\u000A      non-alphanum token characters in its name and a UTF8-NONASCII\u000A      value.\u000A\u000A   If this unusual URI has been defined at a proxy, the proxy will\u000A   forward this request normally.  Otherwise, a proxy will generate a\u000A   404.  Endpoints will generate a 501 listing the methods they\u000A   understand in an Allow header field.\u000A\u000A      Message Details : intmeth\u000A      \u000A      LDT: 01/04/2021\u000A      Parses as expected.\u000A",
      "data": "!interesting-Method0123456789_*+`.%indeed'~ sip:1_unusual.URI~(to-be!sure)&isn't+it$/crazy?,/;;*:&it+has=1,weird!*pas$wo~d_too.(doesn't-it)@example.com SIP/2.0\u000D\u000AVia: SIP/2.0/TCP host1.example.com;branch=z9hG4bK-.!%66*_+`'~\u000D\u000ATo: \"BEL:\\\u0007 NUL:\\\u0000 DEL:\\\" <sip:1_unusual.URI~(to-be!sure)&isn't+it$/crazy?,/;;*@example.com>\u000D\u000AFrom: token1~` token2'+_ token3*%!.- <sip:mundane@example.com>;fromParam''~+*_!.-%=\"ÑÐ°Ð±Ð¾ÑÐ°ÑÑÐ¸Ð¹\";tag=_token~1'+`*%!-.\u000D\u000ACall-ID: intmeth.word%ZK-!.*_+'@word`~)(><:\\/\"][?}{\u000D\u000ACSeq: 139122385 !interesting-Method0123456789_*+`.%indeed'~\u000D\u000AMax-Forwards: 255\u000D\u000AextensionHeader-!.%*+_`'~:ï»¿å¤§åé»\u000D\u000AContent-Length: 0\u000D\u000A\u000D\u000A"
    },
    "mpart01": {
      "description": "3.1.1.11.  Multipart MIME Message\u000A\u000A   This MESSAGE request contains two body parts.  The second part is\u000A   binary encoded and contains null (0x00) characters.  Receivers must\u000A   take care to frame the received message properly.\u000A\u000A   Parsers must accept this message as well formed, even if the\u000A   application above the parser does not support multipart/signed.\u000A\u000A   Additional examples of multipart/mime messages, in particular S/MIME\u000A   messages, are available in the security call flow examples document\u000A   [SIP-SEC].\u000A\u000A      Message Details : mpart01\u000A      \u000A      LDT: 01/04/2021\u000A      message-body accepts all octets as required.\u000A",
      "data": "MESSAGE sip:kumiko@example.org SIP/2.0\u000D\u000AVia: SIP/2.0/UDP 127.0.0.1:5070;branch=z9hG4bK-d87543-4dade06d0bdb11ee-1--d87543-;rport\u000D\u000AMax-Forwards: 70\u000D\u000ARoute: <sip:127.0.0.1:5080>\u000D\u000AIdentity: r5mwreLuyDRYBi/0TiPwEsY3rEVsk/G2WxhgTV1PF7hHuLIK0YWVKZhKv9Mj8UeXqkMVbnVq37CD+813gvYjcBUaZngQmXc9WNZSDNGCzA+fWl9MEUHWIZo1CeJebdY/XlgKeTa0Olvq0rt70Q5jiSfbqMJmQFteeivUhkMWYUA=\u000D\u000AContact: <sip:fluffy@127.0.0.1:5070>\u000D\u000ATo: <sip:kumiko@example.org>\u000D\u000AFrom: <sip:fluffy@example.com>;tag=2fb0dcc9\u000D\u000ACall-ID: 3d9485ad0c49859b@Zmx1ZmZ5LW1hYy0xNi5sb2NhbA..\u000D\u000ACSeq: 1 MESSAGE\u000D\u000AContent-Transfer-Encoding: binary\u000D\u000AContent-Type: multipart/mixed;boundary=7a9cbec02ceef655\u000D\u000ADate: Sat, 15 Oct 2005 04:44:56 GMT\u000D\u000AUser-Agent: SIPimp.org/0.2.5 (curses)\u000D\u000AContent-Length: 553\u000D\u000A\u000D\u000A--7a9cbec02ceef655\u000D\u000AContent-Type: text/plain\u000D\u000AContent-Transfer-Encoding: binary\u000D\u000A\u000D\u000AHello\u000D\u000A--7a9cbec02ceef655\u000D\u000AContent-Type: application/octet-stream\u000D\u000AContent-Transfer-Encoding: binary\u000D\u000A\u000D\u000A0\u0001R\u0006\u0009*H÷\u000D\u0001\u0007\u0002 \u0001C0\u0001?\u0002\u0001\u00011\u00090\u0007\u0006\u0005+\u000E\u0003\u0002\u001A0\u000B\u0006\u0009*H÷\u000D\u0001\u0007\u00011\u0001 0\u0001\u001C\u0002\u0001\u00010|0p1\u000B0\u0009\u0006\u0003U\u0004\u0006\u0013\u0002US1\u00130\u0011\u0006\u0003U\u0004\u0008\u0013\u000ACalifornia1\u00110\u000F\u0006\u0003U\u0004\u0007\u0013\u0008San Jose1\u000E0\u000C\u0006\u0003U\u0004\u000A\u0013\u0005sipit1)0'\u0006\u0003U\u0004\u000B\u0013 Sipit Test Certificate Authority\u0002\u0008\u0001\u0000q\u00023\u0001\u00130\u0007\u0006\u0005+\u000E\u0003\u0002\u001A0\u000D\u0006\u0009*H÷\u000D\u0001\u0001\u0001\u0005\u0000\u0004ôfùHðR-Òåªéòþ\u0015 fYqbèÚ*¨Ø5\u000AhÎÿ®<½+ÿ\u0016uÝÕdY=ÖG(òb ÷éAt3\u000D\u0015í«ÛÑ\u000CB\u0010.{rÒÀÉ®.ûÇÀÏù\u0017/;\u0002~OÀ'áTmä¶ª:»>fÌË]ÖÆK\u0014¸æÿ\u0018-Oå{e¼Ð\u0005\u000D\u000A--7a9cbec02ceef655--\u000D\u000A"
    },
    "hyphens": {
      "description": "3.1.1.8.  Extra Trailing Octets in a UDP Datagram\u000A\u000A   This message contains a single SIP REGISTER request, which ostensibly\u000A   arrived over UDP in a single datagram.  The packet contains extra\u000A   octets after the body (which in this case has zero length).  The\u000A   extra octets happen to look like a SIP INVITE request, but (per\u000A   section 18.3 of [RFC3261]) they are just spurious noise that must be\u000A   ignored.\u000A\u000A   A SIP element receiving this datagram would handle the REGISTER\u000A   request normally and ignore the extra bits that look like an INVITE\u000A   request.  If the element is a proxy choosing to forward the REGISTER,\u000A   the INVITE octets would not appear in the forwarded request.\u000A\u000A      Message Details : hyphens\u000A      \u000A      LDT: 01/04/2021\u000A      This is an added test. It is the same as 3.1.1.8 except\u000A      the domainlabel has been modified to include several cases of hyphens.\u000A      Testing that the ABNF\u000A      domainlabel       =  1*alphanum *(1*\"-\" 1*alphanum)\u000A      performs as expected.\u000A      \u000A      domainlable in\u000A      REGISTER sip:example---1-a---A.com SIP/2.0\u000A      Parses as expected.\u000A      \u000A      domainlabel in\u000A      REGISTER sip:example---1-a---A-.com SIP/2.0\u000A      The parse fails.\u000A\u000A",
      "data": "REGISTER sip:example---1-a---A.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:j.user@example.com;tag=43251j3j324\u000AMax-Forwards: 8\u000AI: dblreq.0ha0isndaksdj99sdfafnl3lk233412\u000AContact: sip:j.user@host.example.com\u000ACSeq: 8 REGISTER\u000AVia: SIP/2.0/UDP 192.0.2.125;branch=z9hG4bKkdjuw23492\u000AContent-Length: 0\u000A\u000A\u000AINVITE sip:joe@example.com SIP/2.0\u000At: sip:joe@example.com\u000AFrom: sip:caller@example.net;tag=141334\u000AMax-Forwards: 8\u000ACall-ID: dblreq.0ha0isnda977644900765@192.0.2.15\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.15;branch=z9hG4bKkdjuw380234\u000AContent-Type: application/sdp\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.15\u000As=-\u000Ac=IN IP4 192.0.2.15\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am =video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A\u000A"
    },
    "dblreq": {
      "description": "3.1.1.8.  Extra Trailing Octets in a UDP Datagram\u000A\u000A   This message contains a single SIP REGISTER request, which ostensibly\u000A   arrived over UDP in a single datagram.  The packet contains extra\u000A   octets after the body (which in this case has zero length).  The\u000A   extra octets happen to look like a SIP INVITE request, but (per\u000A   section 18.3 of [RFC3261]) they are just spurious noise that must be\u000A   ignored.\u000A\u000A   A SIP element receiving this datagram would handle the REGISTER\u000A   request normally and ignore the extra bits that look like an INVITE\u000A   request.  If the element is a proxy choosing to forward the REGISTER,\u000A   the INVITE octets would not appear in the forwarded request.\u000A\u000A      Message Details : dblreq\u000A      \u000A      LDT: 01/04/2021\u000A      Parses the message-body as expected.\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:j.user@example.com;tag=43251j3j324\u000AMax-Forwards: 8\u000AI: dblreq.0ha0isndaksdj99sdfafnl3lk233412\u000AContact: sip:j.user@host.example.com\u000ACSeq: 8 REGISTER\u000AVia: SIP/2.0/UDP 192.0.2.125;branch=z9hG4bKkdjuw23492\u000AContent-Length: 0\u000A\u000A\u000AINVITE sip:joe@example.com SIP/2.0\u000At: sip:joe@example.com\u000AFrom: sip:caller@example.net;tag=141334\u000AMax-Forwards: 8\u000ACall-ID: dblreq.0ha0isnda977644900765@192.0.2.15\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.15;branch=z9hG4bKkdjuw380234\u000AContent-Type: application/sdp\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.15\u000As=-\u000Ac=IN IP4 192.0.2.15\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am =video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A\u000A"
    }
  },
  "invalid": {
    "badvers": {
      "description": "3.1.2.16.  Unknown Protocol Version\u000A\u000A   To an element implementing [RFC3261], this request is malformed due\u000A   to its high version number.\u000A\u000A   The element should respond to the request with a 505 Version Not\u000A   Supported error.\u000A\u000A      Message Details : badvers\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      From RFC 3261\u000A           \"To be compliant with this specification,\u000A           applications sending SIP messages MUST include a SIP-Version\u000A           of \"SIP/2.0\".  The SIP-Version string is case-insensitive,\u000A           but implementations MUST send upper-case.\"\u000A\u000A      SIP-Version       =  \"SIP\" \"/\" 1*DIGIT \".\" 1*DIGIT\u000A      Constraints on the version number would have to be semantically enforced.\u000A\u000A",
      "data": "OPTIONS sip:t.watson@example.org SIP/7.0\u000AVia:     SIP/7.0/UDP c.example.com;branch=z9hG4bKkdjuw\u000AMax-Forwards:     70\u000AFrom:    A. Bell <sip:a.g.bell@example.com>;tag=qweoiqpe\u000ATo:      T. Watson <sip:t.watson@example.org>\u000ACall-ID: badvers.31417@c.example.com\u000ACSeq:    1 OPTIONS\u000Al: 0\u000A\u000A"
    },
    "regbadct": {
      "description": "3.1.2.13.  Failure to Enclose name-addr URI in <>\u000A\u000A   This REGISTER request is malformed.  The SIP URI contained in the\u000A   Contact Header field has an escaped header, so the field must be in\u000A   name-addr form (which implies that the URI must be enclosed in <>).\u000A\u000A   It is reasonable for an element receiving this request to respond\u000A   with a 400 Bad Request.  An element choosing to be liberal in what it\u000A   accepts could infer the angle brackets since there is no ambiguity in\u000A   this example.  In general, that won't be possible.\u000A\u000A      Message Details : regbadct\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      Actually escaped characters are accepted in SIP-URI headers.\u000A      headers           =  \"?\" header *( \"&\" header )\u000A      header            =  hname \"=\" hvalue\u000A      hname             =  1*( hnv-unreserved / unreserved / escaped )\u000A      hvalue            =  *( hnv-unreserved / unreserved / escaped )\u000A      hnv-unreserved    =  \"[\" / \"]\" / \"/\" / \"?\" / \":\" / \"+\" / \"$\"\u000A\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:user@example.com;tag=998332\u000AMax-Forwards: 70\u000ACall-ID: regbadct.k345asrl3fdbv@10.0.0.1\u000ACSeq: 1 REGISTER\u000AVia: SIP/2.0/UDP 135.180.130.133:5060;branch=z9hG4bKkdjuw\u000AContact: sip:user@example.com?Route=%3Csip:sip.example.com%3E\u000Al: 0\u000A\u000A"
    },
    "clerr": {
      "description": "3.1.2.2.  Content Length Larger Than Message\u000A\u000A   This is a request message with a Content Length that is larger than\u000A   the actual length of the body.\u000A\u000A   When sent over UDP (as this message ostensibly was), the receiving\u000A   element should respond with a 400 Bad Request error.  If this message\u000A   arrived over a stream-based transport, such as TCP, there's not much\u000A   the receiving party could do but wait for more data on the stream and\u000A   close the connection if none is forthcoming within a reasonable\u000A   period of time.\u000A\u000A      Message Details : clerr\u000A      \u000A      LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000AMax-Forwards: 80\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=93942939o2\u000AContact: <sip:caller@hungry.example.net>\u000ACall-ID: clerr.0ha0isndaksdjweiafasdk3\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP host5.example.com;branch=z9hG4bK-39234-23523\u000AContent-Type: application/sdp\u000AContent-Length: 9999\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.155\u000As=-\u000Ac=IN IP4 192.0.2.155\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "ltgtruri": {
      "description": "3.1.2.7.  <> Enclosing Request-URI\u000A\u000A   This INVITE request is invalid because the Request-URI has been\u000A   enclosed within in \"<>\".\u000A\u000A   It is reasonable always to reject a request with this error with a\u000A   400 Bad Request.  Elements attempting to be liberal with what they\u000A   accept may choose to ignore the brackets.  If the element forwards\u000A   the request, it must not include the brackets in the messages it\u000A   sends.\u000A\u000A      Message Details : ltgtruri\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      Fails as expected.\u000A",
      "data": "INVITE <sip:user@example.com> SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=39291\u000AMax-Forwards: 23\u000ACall-ID: ltgtruri.1@192.0.2.5\u000ACSeq: 1 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.5\u000AContact: <sip:caller@host5.example.net>\u000AContent-Type: application/sdp\u000AContent-Length: 159\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.5\u000As=-\u000Ac=IN IP4 192.0.2.5\u000At=3149328700 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "test": {
      "description": "   NOTE: LDT: 01/04/2021\u000A   Undocumented test.\u000A   The Request-Line is invalid.\u000A   The Request-URI is not followed by  \"SP SIP-Version CRLF\".\u000A\u000A      Message Details : test\u000A      \u000A      The parse fails immediately at the missing space, SP,\u000A      after the Request-URI.\u000A\u000A",
      "data": "INVITE sip:alan@jasomi.com\u000ATO : alan@jasomi.com\u000AFrom: ralph@example.com\u000AMaX-fOrWaRdS: 0068\u000ACall-ID: test.0ha0isndaksdj@192.0.2.1\u000AXyzzy-2: this is the number ten : 10\u000AXyzzy-3: INVITE\u000AXyzzy: 10000000000\u000AMeaning: foo bar spam\u000AFoobar roobar\u000AContent-Length: 18\u000AContent-Type: application/sdp\u000A\u000Av=0\u000Atesting=123\u000A"
    },
    "lwsruri": {
      "description": "3.1.2.8.  Malformed SIP Request-URI (embedded LWS)\u000A\u000A   This INVITE has illegal LWS within the Request-URI.\u000A\u000A   An element receiving this request should respond with a 400 Bad\u000A   Request.\u000A\u000A   An element could attempt to ignore the embedded LWS for those schemes\u000A   (like SIP) where doing so would not introduce ambiguity.\u000A\u000A      Message Details : lwsruri\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      Fails as expected. Fails immediately at the missing SP\u000A      after the Request-URI.\u000A",
      "data": "INVITE sip:user@example.com; lr SIP/2.0\u000ATo: sip:user@example.com;tag=3xfe-9921883-z9f\u000AFrom: sip:caller@example.net;tag=231413434\u000AMax-Forwards: 5\u000ACall-ID: lwsruri.asdfasdoeoi2323-asdfwrn23-asd834rk423\u000ACSeq: 2130706432 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.1:5060;branch=z9hG4bKkdjuw2395\u000AContact: <sip:caller@host1.example.net>\u000AContent-Type: application/sdp\u000AContent-Length: 159\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000As=-\u000Ac=IN IP4 192.0.2.1\u000At=3149328700 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "trws": {
      "description": "3.1.2.10.  SP Characters at End of Request-Line\u000A\u000A   This OPTIONS request contains SP characters between the SIP-Version\u000A   field and the CRLF terminating the Request-Line.\u000A\u000A   It is acceptable to reject this request as malformed.  An element\u000A   that is liberal in what it accepts may ignore these extra SP\u000A   characters when processing the request.  If the element forwards the\u000A   request, it must not include these extra SP characters in the\u000A   messages it sends.\u000A\u000A      Message Details : trws\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      Fails as expected. Fails immediately at the SP following the\u000A      SIP-Version.\u000A",
      "data": "OPTIONS sip:remote-target@example.com SIP/2.0  \u000AVia: SIP/2.0/TCP host1.examle.com;branch=z9hG4bK299342093\u000ATo: <sip:remote-target@example.com>\u000AFrom: <sip:local-resource@example.com>;tag=329429089\u000ACall-ID: trws.oicu34958239neffasdhr2345r\u000AAccept: application/sdp\u000ACSeq: 238923 OPTIONS\u000AMax-Forwards: 70\u000AContent-Length: 0\u000A\u000A"
    },
    "escruri": {
      "description": "3.1.2.11.  Escaped Headers in SIP Request-URI\u000A\u000A   This INVITE is malformed, as the SIP Request-URI contains escaped\u000A   headers.\u000A   \u000A   It is acceptable for an element to reject this request with a 400 Bad\u000A   Request.  An element could choose to be liberal in what it accepts\u000A   and ignore the escaped headers.  If the element is a proxy, the\u000A   escaped headers must not appear in the Request-URI of the forwarded\u000A   request (and most certainly must not be translated into the actual\u000A   header of the forwarded request).\u000A\u000A      Message Details : escruri\u000A\u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A\u000A      Escaped characters actually are allowed. The ABNF in RFC 3261 is\u000A\u000A      headers         =  \"?\" header *( \"&\" header )\u000A      header          =  hname \"=\" hvalue\u000A      hname           =  1*( hnv-unreserved / unreserved / escaped )\u000A      hvalue          =  *( hnv-unreserved / unreserved / escaped )\u000A      hnv-unreserved  =  \"[\" / \"]\" / \"/\" / \"?\" / \":\" / \"+\" / \"$\"\u000A\u000A\u000A",
      "data": "INVITE sip:user@example.com?Route=%3Csip:example.com%3E SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=341518\u000AMax-Forwards: 7\u000AContact: <sip:caller@host39923.example.net>\u000ACall-ID: escruri.23940-asdfhj-aje3br-234q098w-fawerh2q-h4n5\u000ACSeq: 149209342 INVITE\u000AVia: SIP/2.0/UDP host-of-the-hour.example.com;branch=z9hG4bKkdjuw\u000AContent-Type: application/sdp\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000As=-\u000Ac=IN IP4 192.0.2.1\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "scalar02": {
      "description": "3.1.2.4.  Request Scalar Fields with Overlarge Values\u000A\u000A   This request contains several scalar header field values outside\u000A   their legal range.\u000A\u000A      o  The CSeq sequence number is >2**32-1.\u000A\u000A      o  The Max-Forwards value is >255.\u000A\u000A      o  The Expires value is >2**32-1.\u000A\u000A      o  The Contact expires parameter value is >2**32-1.\u000A\u000A   An element receiving this request should respond with a 400 Bad\u000A   Request due to the CSeq error.  If only the Max-Forwards field were\u000A   in error, the element could choose to process the request as if the\u000A   field were absent.  If only the expiry values were in error, the\u000A   element could treat them as if they contained the default values for\u000A   expiration (3600 in this case).\u000A\u000A   Other scalar request fields that may contain aberrant values include,\u000A   but are not limited to, the Contact q value, the Timestamp value, and\u000A   the Via ttl parameter.\u000A\u000A      Message Details : scalar02\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      These are semantic restrictions.\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000AVia: SIP/2.0/TCP host129.example.com;branch=z9hG4bK342sdfoi3\u000ATo: <sip:user@example.com>\u000AFrom: <sip:user@example.com>;tag=239232jh3\u000ACSeq: 36893488147419103232 REGISTER\u000ACall-ID: scalar02.23o0pd9vanlq3wnrlnewofjas9ui32\u000AMax-Forwards: 300\u000AExpires: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\u000AContact: <sip:user@host129.example.com>\u000A  ;expires=280297596632815\u000AContent-Length: 0\u000A\u000A"
    },
    "mismatch01": {
      "description": "3.1.2.17.  Start Line and CSeq Method Mismatch\u000A\u000A   This request has mismatching values for the method in the start line\u000A   and the CSeq header field.  Any element receiving this request will\u000A   respond with a 400 Bad Request.\u000A\u000A      Message Details : mismatch01\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      This is a semantic restriction.\u000A\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=34525\u000AMax-Forwards: 6\u000ACall-ID: mismatch01.dj0234sxdfl3\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP host.example.com;branch=z9hG4bKkdjuw\u000Al: 0\u000A\u000A"
    },
    "lwsstart": {
      "description": "3.1.2.9.  Multiple SP Separating Request-Line Elements\u000A\u000A   This INVITE has illegal multiple SP characters between elements of\u000A   the start line.\u000A\u000A   It is acceptable to reject this request as malformed.  An element\u000A   that is liberal in what it accepts may ignore these extra SP\u000A   characters when processing the request.  If the element forwards the\u000A   request, it must not include these extra SP characters in the\u000A   messages it sends.\u000A\u000A      Message Details : lwsstart\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      Fails as expected. Fails immediately at the second SP after the Method.\u000A",
      "data": "INVITE  sip:user@example.com  SIP/2.0\u000AMax-Forwards: 8\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=8814\u000ACall-ID: lwsstart.dfknq234oi243099adsdfnawe3@example.com\u000ACSeq: 1893884 INVITE\u000AVia: SIP/2.0/UDP host1.example.com;branch=z9hG4bKkdjuw3923\u000AContact: <sip:caller@host1.example.net>\u000AContent-Type: application/sdp\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000As=-\u000Ac=IN IP4 192.0.2.1\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "badaspec": {
      "description": "3.1.2.14.  Spaces within addr-spec\u000A\u000A   This request is malformed, since the addr-spec in the To header field\u000A   contains spaces.  Parsers receiving this request must not break.  It\u000A   is reasonable to reject this request with a 400 Bad Request response.\u000A   Elements attempting to be liberal may ignore the spaces.\u000A\u000A      Message Details : badaspec\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds.\u000A      \u000A      The \"To\" header does indeed fail, but the message-header:\u000A      /  header-name                HCOLON extension-header) CRLF\u000A      does succeed.\u000A      \u000A      The extension-header allows almost anything and will usually succeed,\u000A      even if the \"To\" header fails. The application would have to handle\u000A      this in semantics.\u000A\u000A",
      "data": "OPTIONS sip:user@example.org SIP/2.0\u000AVia: SIP/2.0/UDP host4.example.com:5060;branch=z9hG4bKkdju43234\u000AMax-Forwards: 70\u000AFrom: \"Bell, Alexander\" <sip:a.g.bell@example.com>;tag=433423\u000ATo: \"Watson, Thomas\" < sip:t.watson@example.org >\u000ACall-ID: badaspec.sdf0234n2nds0a099u23h3hnnw009cdkne3\u000AAccept: application/sdp\u000ACSeq: 3923239 OPTIONS\u000Al: 0\u000A\u000A"
    },
    "scalarlg": {
      "description": "3.1.2.5.  Response Scalar Fields with Overlarge Values\u000A\u000A   This response contains several scalar header field values outside\u000A   their legal range.\u000A\u000A   o  The CSeq sequence number is >2**32-1.\u000A\u000A   o  The Retry-After field is unreasonably large (note that RFC 3261\u000A      does not define a legal range for this field).\u000A\u000A   o  The Warning field has a warning-value with more than 3 digits.\u000A\u000A   An element receiving this response will simply discard it.\u000A\u000A      Message Details : scalarlg\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      The Warning header does indeed fail. \u000A      But then the liberal extension-header accepts it.\u000A      This would require some error productions to catch this syntactically.\u000A\u000A",
      "data": "SIP/2.0 503 Service Unavailable\u000AVia: SIP/2.0/TCP host129.example.com;branch=z9hG4bKzzxdiwo34sw;received=192.0.2.129\u000ATo: <sip:user@example.com>\u000AFrom: <sip:other@example.net>;tag=2easdjfejw\u000ACSeq: 9292394834772304023312 OPTIONS\u000ACall-ID: scalarlg.noase0of0234hn2qofoaf0232aewf2394r\u000ARetry-After: 949302838503028349304023988\u000AWarning: 1812 overture \"In Progress\"\u000AContent-Length: 0\u000A\u000A"
    },
    "mismatch02": {
      "description": "3.1.2.18.  Unknown Method with CSeq Method Mismatch\u000A\u000A   This message has an unknown method in the start line, and a CSeq\u000A   method tag that does not match.\u000A\u000A   Any element receiving this response should respond with a 501 Not\u000A   Implemented.  A 400 Bad Request is also acceptable, but choosing a\u000A   501 (particularly at proxies) has better future-proof\u000A   characteristics.\u000A\u000A      Message Details : mismatch02\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      Accepts extension-method.\u000A\u000A",
      "data": "NEWMETHOD sip:user@example.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=34525\u000AMax-Forwards: 6\u000ACall-ID: mismatch02.dj0234sxdfl3\u000ACSeq: 8 INVITE\u000AContact: <sip:caller@host.example.net>\u000AVia: SIP/2.0/UDP host.example.net;branch=z9hG4bKkdjuw\u000AContent-Type: application/sdp\u000Al: 138\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.1\u000Ac=IN IP4 192.0.2.1\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "baddate": {
      "description": "3.1.2.12.  Invalid Time Zone in Date Header Field\u000A\u000A   This INVITE is invalid, as it contains a non-GMT time zone in the SIP\u000A   Date header field.\u000A\u000A   It is acceptable to reject this request as malformed (though an\u000A   element shouldn't do that unless the contents of the Date header\u000A   field were actually important to its processing).  An element wishing\u000A   to be liberal in what it accepts could ignore this value altogether\u000A   if it wasn't going to use the Date header field anyway.  Otherwise,\u000A   it could attempt to interpret this date and adjust it to GMT.\u000A\u000A   RFC 3261 explicitly defines the only acceptable time zone designation\u000A   as \"GMT\".  \"UT\", while synonymous with GMT per [RFC2822], is not\u000A   valid.  \"UTC\" and \"UCT\" are also invalid.\u000A\u000A      Message Details : baddate\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A\u000A      Date fails as expected. However, as with other invalid messages\u000A      when such a header fails, the extension-header picks it up OK.\u000A\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=2234923\u000AMax-Forwards: 70\u000ACall-ID: baddate.239423mnsadf3j23lj42--sedfnm234\u000ACSeq: 1392934 INVITE\u000AVia: SIP/2.0/UDP host.example.com;branch=z9hG4bKkdjuw\u000ADate: Fri, 01 Jan 2010 16:00:00 EST\u000AContact: <sip:caller@host5.example.net>\u000AContent-Type: application/sdp\u000AContent-Length: 150\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.5\u000As=-\u000Ac=IN IP4 192.0.2.5\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "ncl": {
      "description": "3.1.2.3.  Negative Content-Length\u000A\u000A   This request has a negative value for Content-Length.\u000A\u000A   An element receiving this message should respond with an error.  This\u000A   request appeared over UDP, so the remainder of the datagram can\u000A   simply be discarded.  If a request like this arrives over TCP, the\u000A   framing error is not recoverable, and the connection should be\u000A   closed.  The same behavior is appropriate for messages that arrive\u000A   without a numeric value in the Content-Length header field, such as\u000A   the following:\u000A\u000A      Content-Length: five\u000A\u000A   Implementors should take extra precautions if the technique they\u000A   choose for converting this ascii field into an integral form can\u000A   return a negative value.  In particular, the result must not be used\u000A   as a counter or array index.\u000A\u000A      Message Details : ncl\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      Content-Length does indeed fail. But the liberal extension-header\u000A      picks it up OK.\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000AMax-Forwards: 254\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=32394234\u000ACall-ID: ncl.0ha0isndaksdj2193423r542w35\u000ACSeq: 0 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.53;branch=z9hG4bKkdjuw\u000AContact: <sip:caller@example53.example.net>\u000AContent-Type: application/sdp\u000AContent-Length: -999\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.53\u000As=-\u000Ac=IN IP4 192.0.2.53\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "baddn": {
      "description": "3.1.2.15.  Non-token Characters in Display Name\u000A\u000A   This OPTIONS request is malformed, since the display names in the To\u000A   and From header fields contain non-token characters but are unquoted.\u000A\u000A   It is reasonable always to reject this kind of error with a 400 Bad\u000A   Request response.\u000A\u000A   An element may attempt to be liberal in what it receives and infer\u000A   the missing quotes.  If this element were a proxy, it must not\u000A   propagate the error into the request it forwards.  As a consequence,\u000A   if the fields are covered by a signature, there's not much point in\u000A   trying to be liberal - the message should simply be rejected.\u000A\u000A      Message Details : baddn\u000A      \u000A      NOTE: LDT: 06/20/2019\u000A      TO and From fail as expected on the non-token comma.\u000A      However, the extension-header picks them up OK.\u000A      This message fails because it is missing the final CRLF at the end.\u000A",
      "data": "OPTIONS sip:t.watson@example.org SIP/2.0\u000AVia:     SIP/2.0/UDP c.example.com:5060;branch=z9hG4bKkdjuw\u000AMax-Forwards:      70\u000AFrom:    Bell, Alexander <sip:a.g.bell@example.com>;tag=43\u000ATo:      Watson, Thomas <sip:t.watson@example.org>\u000ACall-ID: baddn.31415@c.example.com\u000AAccept: application/sdp\u000ACSeq:    3923239 OPTIONS\u000Al: 0\u000A"
    },
    "badinv01": {
      "description": "3.1.2.1.  Extraneous Header Field Separators\u000A\u000A   The Via header field of this request contains additional semicolons\u000A   and commas without parameters or values.  The Contact header field\u000A   contains additional semicolons without parameters.  This message is\u000A   syntactically invalid.\u000A\u000A   An element receiving this request should respond with a 400 Bad\u000A   Request error.\u000A\u000A      Message Details : badinv01\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      It is interesting how the Via fails. The Via itself is accepted as\u000A      Via: SIP/2.0/UDP 192.0.2.15\u000A      The failure is finding \";\" instead of CRLF after that.\u000A      \u000A      The parser never actually gets to the Contact header. The entire\u000A      message fails so badly from the \";;,;,,\" following Via that it\u000A      gives up the fight.\u000A\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=134161461246\u000AMax-Forwards: 7\u000ACall-ID: badinv01.0ha0isndaksdjasdf3234nas\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.15;;,;,,\u000AContact: \"Joe\" <sip:joe@example.org>;;;;\u000AContent-Length: 152\u000AContent-Type: application/sdp\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.15\u000As=-\u000Ac=IN IP4 192.0.2.15\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "bigcode": {
      "description": "3.1.2.19.  Overlarge Response Code\u000A\u000A   This response has a response code larger than 699.  An element\u000A   receiving this response should simply drop it.\u000A\u000A      Message Details : bigcode\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      Fails as expected.\u000A\u000A",
      "data": "SIP/2.0 4294967301 better not break the receiver\u000AVia: SIP/2.0/UDP 192.0.2.105;branch=z9hG4bK2398ndaoe\u000ACall-ID: bigcode.asdof3uj203asdnf3429uasdhfas3ehjasdfas9i\u000ACSeq: 353494 INVITE\u000AFrom: <sip:user@example.com>;tag=39ansfi3\u000ATo: <sip:user@example.edu>;tag=902jndnke3\u000AContent-Length: 0\u000AContact: <sip:user@host105.example.com>\u000A\u000A"
    },
    "quotbal": {
      "description": "3.1.2.6.  Unterminated Quoted String in Display Name\u000A\u000A   This is a request with an unterminated quote in the display name of\u000A   the To field.  An element receiving this request should return a 400\u000A   Bad Request error.\u000A\u000A   An element could attempt to infer a terminating quote and accept the\u000A   message.  Such an element needs to take care that it makes a\u000A   reasonable inference when it encounters\u000A\u000A      To: \"Mr J. User <sip:j.user@example.com> <sip:realj@example.net>\u000A\u000A      Message Details : quotbal\u000A      \u000A      NOTE: LDT: 01/04/2021\u000A      The parse succeeds. The message is syntactically correct.\u000A      The To: header does indeed fail. The liberal extension-header\u000A      accepts it OK.\u000A      \u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ATo: \"Mr. J. User <sip:j.user@example.com>\u000AFrom: sip:caller@example.net;tag=93334\u000AMax-Forwards: 10\u000ACall-ID: quotbal.aksdj\u000AContact: <sip:caller@host59.example.net>\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.59:5050;branch=z9hG4bKkdjuw39234\u000AContent-Type: application/sdp\u000AContent-Length: 152\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.15\u000As=-\u000Ac=IN IP4 192.0.2.15\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    }
  },
  "semantics": {
    "regaut01": {
      "description": "3.3.7.  Unknown Authorization Scheme\u000A\u000A   This REGISTER request contains an Authorization header field with an\u000A   unknown scheme.  The request is well formed.  A parser must not fail\u000A   when receiving it.\u000A\u000A   A proxy will treat this request as it would any other REGISTER.  If\u000A   it forwards the request, it will include this Authorization header\u000A   field unmodified in the forwarded messages.\u000A\u000A   A registrar that does not care about challenge-response\u000A   authentication will simply ignore the Authorization header field,\u000A   processing this registration as if the field were not present.  A\u000A   registrar that does care about challenge-response authentication will\u000A   reject this request with a 401, issuing a new challenge with a scheme\u000A   it understands.\u000A\u000A   Endpoints choosing not to act as registrars will simply reject the\u000A   request.  A 405 Method Not Allowed is appropriate.\u000A\u000A      Message Details : regaut01\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: sip:j.user@example.com\u000AFrom: sip:j.user@example.com;tag=87321hj23128\u000AMax-Forwards: 8\u000ACall-ID: regaut01.0ha0isndaksdj\u000ACSeq: 9338 REGISTER\u000AVia: SIP/2.0/TCP 192.0.2.253;branch=z9hG4bKkdjuw\u000AAuthorization: NoOneKnowsThisScheme opaque-data=here\u000AContent-Length:0\u000A\u000A"
    },
    "cparam01": {
      "description": "3.3.12.  REGISTER with a Contact Header Parameter\u000A\u000A   This register request contains a contact where the 'unknownparam'\u000A   parameter must be interpreted as a contact-param and not a url-param.\u000A\u000A   This REGISTER should succeed.  The response must not include\u000A   \"unknownparam\" as a url-parameter for this binding.  Likewise,\u000A   \"unknownparam\" must not appear as a url-parameter in any binding\u000A   during subsequent fetches.\u000A\u000A   Behavior is the same, of course, for any known contact-param\u000A   parameter names.\u000A\u000A      Message Details : cparam01\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000AVia: SIP/2.0/UDP saturn.example.com:5060;branch=z9hG4bKkdjuw\u000AMax-Forwards: 70\u000AFrom: sip:watson@example.com;tag=DkfVgjkrtMwaerKKpe\u000ATo: sip:watson@example.com\u000ACall-ID: cparam01.70710@saturn.example.com\u000ACSeq: 2 REGISTER\u000AContact: sip:+19725552222@gw1.example.net;unknownparam\u000Al: 0\u000A\u000A"
    },
    "mcl01": {
      "description": "3.3.9.  Multiple Content-Length Values\u000A\u000A   Multiple conflicting Content-Length header field values appear in\u000A   this request.\u000A\u000A   From a framing perspective, this situation is equivalent to an\u000A   invalid Content-Length value (or no value at all).\u000A\u000A   An element receiving this message should respond with an error.  This\u000A   request appeared over UDP, so the remainder of the datagram can\u000A   simply be discarded.  If a request like this arrives over TCP, the\u000A   framing error is not recoverable, and the connection should be\u000A   closed.\u000A\u000A      Message Details : mcl01\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000AVia: SIP/2.0/UDP host5.example.net;branch=z9hG4bK293423\u000ATo: sip:user@example.com\u000AFrom: sip:other@example.net;tag=3923942\u000ACall-ID: mcl01.fhn2323orihawfdoa3o4r52o3irsdf\u000ACSeq: 15932 OPTIONS\u000AContent-Length: 13\u000AMax-Forwards: 60\u000AContent-Length: 5\u000AContent-Type: text/plain\u000A\u000AThere's no way to know how many octets are supposed to be here.\u000A\u000A"
    },
    "regescrt": {
      "description": "3.3.14.  REGISTER with a URL Escaped Header\u000A\u000A   This register request contains a contact where the URI has an escaped\u000A   header.\u000A\u000A   The register should succeed, and a subsequent retrieval of the\u000A   registration must include the escaped Route header in the contact URI\u000A   for this binding.\u000A\u000A      Message Details : regescrt\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:user@example.com;tag=8\u000AMax-Forwards: 70\u000ACall-ID: regescrt.k345asrl3fdbv@192.0.2.1\u000ACSeq: 14398234 REGISTER\u000AVia: SIP/2.0/UDP host5.example.com;branch=z9hG4bKkdjuw\u000AM: <sip:user@example.com?Route=%3Csip:sip.example.com%3E>\u000AL:0\u000A\u000A"
    },
    "zeromf": {
      "description": "3.3.11.  Max-Forwards of Zero\u000A\u000A   This is a legal SIP request with the Max-Forwards header field value\u000A   set to zero.\u000A\u000A   A proxy should not forward the request and should respond 483 (Too\u000A   Many Hops).  An endpoint should process the request as if the Max-\u000A   Forwards field value were still positive.\u000A\u000A      Message Details : zeromf\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=3ghsd41\u000ACall-ID: zeromf.jfasdlfnm2o2l43r5u0asdfas\u000ACSeq: 39234321 OPTIONS\u000AVia: SIP/2.0/UDP host1.example.com;branch=z9hG4bKkdjuw2349i\u000AMax-Forwards: 0\u000AContent-Length: 0\u000A\u000A"
    },
    "novelsc": {
      "description": "3.3.3.  Request-URI with Known but Atypical Scheme\u000A\u000A   This OPTIONS contains an Request-URI with an IANA-registered scheme\u000A   that does not commonly appear in Request-URIs of SIP requests.  A\u000A   parser must accept this as a well-formed SIP request.\u000A\u000A   If an element will never accept this scheme as meaningful in a\u000A   Request-URI, it is appropriate to treat it as unknown and return a\u000A   416 Unsupported URI Scheme response.  If the element might accept\u000A   some URIs with this scheme, then a 404 Not Found is appropriate for\u000A   those URIs it doesn't accept.\u000A\u000A      Message Details : novelsc\u000A",
      "data": "OPTIONS soap.beep://192.0.2.103:3002 SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=384\u000AMax-Forwards: 3\u000ACall-ID: novelsc.asdfasser0q239nwsdfasdkl34\u000ACSeq: 3923423 OPTIONS\u000AVia: SIP/2.0/TCP host9.example.com;branch=z9hG4bKkdjuw39234\u000AContent-Length: 0\u000A\u000A"
    },
    "invut": {
      "description": "3.3.6.  Unknown Content-Type\u000A\u000A   This INVITE request contains a body of unknown type.  It is\u000A   syntactically valid.  A parser must not fail when receiving it.\u000A\u000A   A proxy receiving this request would process it just as it would any\u000A   other INVITE.  An endpoint receiving this request would reject it\u000A   with a 415 Unsupported Media Type error.\u000A\u000A      Message Details : invut\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000AContact: <sip:caller@host5.example.net>\u000ATo: sip:j.user@example.com\u000AFrom: sip:caller@example.net;tag=8392034\u000AMax-Forwards: 70\u000ACall-ID: invut.0ha0isndaksdjadsfij34n23d\u000ACSeq: 235448 INVITE\u000AVia: SIP/2.0/UDP somehost.example.com;branch=z9hG4bKkdjuw\u000AContent-Type: application/unknownformat\u000AContent-Length: 40\u000A\u000A<audio>\u000A <pcmu port=\"443\"/>\u000A</audio>\u000A"
    },
    "unkscm": {
      "description": "3.3.2.  Request-URI with Unknown Scheme\u000A\u000A   This OPTIONS contains an unknown URI scheme in the Request-URI.  A\u000A   parser must accept this as a well-formed SIP request.\u000A\u000A   An element receiving this request will reject it with a 416\u000A   Unsupported URI Scheme response.\u000A\u000A   Some early implementations attempt to look at the contents of the To\u000A   header field to determine how to route this kind of request.  That is\u000A   an error.  Despite the fact that the To header field and the Request\u000A   URI frequently look alike in simplistic first-hop messages, the To\u000A   header field contains no routing information.\u000A\u000A      Message Details : unkscm\u000A",
      "data": "OPTIONS nobodyKnowsThisScheme:totallyopaquecontent SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.net;tag=384\u000AMax-Forwards: 3\u000ACall-ID: unkscm.nasdfasser0q239nwsdfasdkl34\u000ACSeq: 3923423 OPTIONS\u000AVia: SIP/2.0/TCP host9.example.com;branch=z9hG4bKkdjuw39234\u000AContent-Length: 0\u000A\u000A"
    },
    "sdp01": {
      "description": "3.3.15.  Unacceptable Accept Offering\u000A\u000A   This request indicates that the response must contain a body in an\u000A   unknown type.  In particular, since the Accept header field does not\u000A   contain application/sdp, the response may not contain an SDP body.\u000A   The recipient of this request could respond with a 406 Not\u000A   Acceptable, with a Warning/399 indicating that a response cannot be\u000A   formulated in the formats offered in the Accept header field.  It is\u000A   also appropriate to respond with a 400 Bad Request, since all SIP\u000A   User-Agents (UAs) supporting INVITE are required to support\u000A   application/sdp.\u000A\u000A      Message Details : sdp01\u000A\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ATo: sip:j_user@example.com\u000AContact: <sip:caller@host15.example.net>\u000AFrom: sip:caller@example.net;tag=234\u000AMax-Forwards: 5\u000ACall-ID: sdp01.ndaksdj9342dasdd\u000AAccept: text/nobodyKnowsThis\u000ACSeq: 8 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.15;branch=z9hG4bKkdjuw\u000AContent-Length: 150\u000AContent-Type: application/sdp\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.5\u000As=-\u000Ac=IN IP4 192.0.2.5\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "unksm2": {
      "description": "3.3.4.  Unknown URI Schemes in Header Fields\u000A\u000A   This message contains registered schemes in the To, From, and Contact\u000A   header fields of a request.  The message is syntactically valid.\u000A   Parsers must not fail when receiving this message.\u000A\u000A   Proxies should treat this message as they would any other request for\u000A   this URI.  A registrar would reject this request with a 400 Bad\u000A   Request response, since the To: header field is required to contain a\u000A   SIP or SIPS URI as an AOR.\u000A\u000A      Message Details : unksm2\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000ATo: isbn:2983792873\u000AFrom: <http://www.example.com>;tag=3234233\u000ACall-ID: unksm2.daksdj@hyphenated-host.example.com\u000ACSeq: 234902 REGISTER\u000AMax-Forwards: 70\u000AVia: SIP/2.0/UDP 192.0.2.21:5060;branch=z9hG4bKkdjuw\u000AContact: <name:John_Smith>\u000Al: 0\u000A\u000A"
    },
    "insuf": {
      "description": "3.3.1.  Missing Required Header Fields\u000A\u000A   This request contains no Call-ID, From, or To header fields.\u000A\u000A   An element receiving this message must not break because of the\u000A   missing information.  Ideally, it will respond with a 400 Bad Request\u000A   error.\u000A\u000A      Message Details : insuf\u000A",
      "data": "INVITE sip:user@example.com SIP/2.0\u000ACSeq: 193942 INVITE\u000AVia: SIP/2.0/UDP 192.0.2.95;branch=z9hG4bKkdj.insuf\u000AContent-Type: application/sdp\u000Al: 152\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.95\u000As=-\u000Ac=IN IP4 192.0.2.95\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "multi01": {
      "description": "3.3.8.  Multiple Values in Single Value Required Fields\u000A\u000A   The message contains a request with multiple Call-ID, To, From, Max-\u000A   Forwards, and CSeq values.  An element receiving this request must\u000A   not break.\u000A\u000A   An element receiving this request would respond with a 400 Bad\u000A   Request error.\u000A\u000A      Message Details : multi01\u000A",
      "data": "INVITE sip:user@company.com SIP/2.0\u000AContact: <sip:caller@host25.example.net>\u000AVia: SIP/2.0/UDP 192.0.2.25;branch=z9hG4bKkdjuw\u000AMax-Forwards: 70\u000ACSeq: 5 INVITE\u000ACall-ID: multi01.98asdh@192.0.2.1\u000ACSeq: 59 INVITE\u000ACall-ID: multi01.98asdh@192.0.2.2\u000AFrom: sip:caller@example.com;tag=3413415\u000ATo: sip:user@example.com\u000ATo: sip:other@example.net\u000AFrom: sip:caller@example.net;tag=2923420123\u000AContent-Type: application/sdp\u000Al: 154\u000AContact: <sip:caller@host36.example.net>\u000AMax-Forwards: 5\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.25\u000As=-\u000Ac=IN IP4 192.0.2.25\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A\u000A"
    },
    "bext01": {
      "description": "3.3.5.  Proxy-Require and Require\u000A\u000A   This request tests proper implementation of SIP's Proxy-Require and\u000A   Require extension mechanisms.\u000A\u000A   Any element receiving this request will respond with a 420 Bad\u000A   Extension response, containing an Unsupported header field listing\u000A   these features from either the Require or Proxy-Require header field,\u000A   depending on the role in which the element is responding.\u000A\u000A      Message Details : bext01\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:j_user@example.com\u000AFrom: sip:caller@example.net;tag=242etr\u000AMax-Forwards: 6\u000ACall-ID: bext01.0ha0isndaksdj\u000ARequire: nothingSupportsThis, nothingSupportsThisEither\u000AProxy-Require: noProxiesSupportThis, norDoAnyProxiesSupportThis\u000ACSeq: 8 OPTIONS\u000AVia: SIP/2.0/TLS fold-and-staple.example.com;branch=z9hG4bKkdjuw\u000AContent-Length: 0\u000A\u000A"
    },
    "badbranch": {
      "description": "3.2.1.  Missing Transaction Identifier\u000A\u000A   This request indicates support for RFC 3261-style transaction\u000A   identifiers by providing the z9hG4bK prefix to the branch parameter,\u000A   but it provides no identifier.  A parser must not break when\u000A   receiving this message.  An element receiving this request could\u000A   reject the request with a 400 Response (preferably statelessly, as\u000A   other requests from the source are likely also to have a malformed\u000A   branch parameter), or it could fall back to the RFC 2543-style\u000A   transaction identifier.\u000A\u000A      Message Details : badbranch\u000A",
      "data": "OPTIONS sip:user@example.com SIP/2.0\u000ATo: sip:user@example.com\u000AFrom: sip:caller@example.org;tag=33242\u000AMax-Forwards: 3\u000AVia: SIP/2.0/UDP 192.0.2.1;branch=z9hG4bK\u000AAccept: application/sdp\u000ACall-ID: badbranch.sadonfo23i420jv0as0derf3j3n\u000ACSeq: 8 OPTIONS\u000Al: 0\u000A\u000A"
    },
    "bcast": {
      "description": "3.3.10.  200 OK Response with Broadcast Via Header Field Value\u000A\u000A   This message is a response with a 2nd Via header field value's sent-\u000A   by containing 255.255.255.255.  The message is well formed; parsers\u000A   must not fail when receiving it.\u000A\u000A   Per [RFC3261], an endpoint receiving this message should simply\u000A   discard it.\u000A\u000A   If a proxy followed normal response processing rules blindly, it\u000A   would forward this response to the broadcast address.  To protect\u000A   against this as an avenue of attack, proxies should drop such\u000A   responses.\u000A\u000A      Message Details : bcast\u000A",
      "data": "SIP/2.0 200 OK\u000AVia: SIP/2.0/UDP 192.0.2.198;branch=z9hG4bK1324923\u000AVia: SIP/2.0/UDP 255.255.255.255;branch=z9hG4bK1saber23\u000ACall-ID: bcast.0384840201234ksdfak3j2erwedfsASdf\u000ACSeq: 35 INVITE\u000AFrom: sip:user@example.com;tag=11141343\u000ATo: sip:user@example.edu;tag=2229\u000AContent-Length: 154\u000AContent-Type: application/sdp\u000AContact: <sip:user@host28.example.com>\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.198\u000As=-\u000Ac=IN IP4 192.0.2.198\u000At=0 0\u000Am=audio 49217 RTP/AVP 0 12\u000Am=video 3227 RTP/AVP 31\u000Aa=rtpmap:31 LPC\u000A"
    },
    "cparam02": {
      "description": "3.3.13.  REGISTER with a url-parameter\u000A\u000A   This register request contains a contact where the URI has an unknown\u000A   parameter.\u000A\u000A   The register should succeed, and a subsequent retrieval of the\u000A   registration must include \"unknownparam\" as a url-parameter.\u000A\u000A   Behavior is the same, of course, for any known url-parameter names.\u000A\u000A      Message Details : cparam02\u000A",
      "data": "REGISTER sip:example.com SIP/2.0\u000AVia: SIP/2.0/UDP saturn.example.com:5060;branch=z9hG4bKkdjuw\u000AMax-Forwards: 70\u000AFrom: sip:watson@example.com;tag=838293\u000ATo: sip:watson@example.com\u000ACall-ID: cparam02.70710@saturn.example.com\u000ACSeq: 3 REGISTER\u000AContact: <sip:+19725552222@gw1.example.net;unknownparam>\u000Al: 0\u000A\u000A"
    },
    "inv2543": {
      "description": "3.4.1.  INVITE with RFC 2543 Syntax\u000A\u000A   This is a legal message per RFC 2543 (and several bis versions) that\u000A   should be accepted by RFC 3261 elements that want to maintain\u000A   backwards compatibility.\u000A\u000A   o  There is no branch parameter at all on the Via header field value.\u000A\u000A   o  There is no From tag.\u000A\u000A   o  There is no explicit Content-Length.  (The body is assumed to be\u000A      all octets in the datagram after the null-line.)\u000A\u000A   o  There is no Max-Forwards header field.\u000A\u000A      Message Details : inv2543\u000A",
      "data": "INVITE sip:UserB@example.com SIP/2.0\u000AVia: SIP/2.0/UDP iftgw.example.com\u000AFrom: <sip:+13035551111@ift.client.example.net;user=phone>\u000ARecord-Route: <sip:UserB@example.com;maddr=ss1.example.com>\u000ATo: sip:+16505552222@ss1.example.net;user=phone\u000ACall-ID: inv2543.1717@ift.client.example.com\u000ACSeq: 56 INVITE\u000AContent-Type: application/sdp\u000A\u000Av=0\u000Ao=mhandley 29739 7272939 IN IP4 192.0.2.5\u000As=-\u000Ac=IN IP4 192.0.2.5\u000At=0 0\u000Am=audio 49217 RTP/AVP 0\u000A"
    }
  }
}